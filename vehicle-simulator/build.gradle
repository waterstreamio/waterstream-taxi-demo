plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

group = 'io.simplematter.waterstream'
version = "1.0.0-SNAPSHOT"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
  ktlint
}

ext {
    kotlinVersion = '1.3.20'
    vertxVersion = '3.8.5'
    junitJupiterEngineVersion = '5.4.0'
    prometheusClientVersion = '0.6.0'
    kotlinTestVersion = "3.2.1"
}

application {
    mainClassName = 'io.simplematter.waterstream.vehiclesimulator.Service'
}

dependencies {
    ktlint "com.pinterest:ktlint:0.36.0"
    //VertX
    implementation "io.vertx:vertx-web:$vertxVersion"
    implementation "io.vertx:vertx-lang-kotlin:$vertxVersion"
    implementation "io.vertx:vertx-mqtt:$vertxVersion"
    implementation "io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion"

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "commons-io:commons-io:2.6"

    implementation 'com.github.kittinunf.fuel:fuel:2.2.1'
    implementation 'com.github.kittinunf.fuel:fuel-coroutines:2.2.1'

    //JSON
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8")

    //Config
    implementation "io.github.config4k:config4k:0.4.1"
    implementation "com.typesafe:config:1.4.0"

    //Logging
    implementation('org.slf4j:slf4j-api:1.7.32')
    implementation("ch.qos.logback:logback-classic:1.2.9")

    //Monitoring
    implementation("io.prometheus:simpleclient:$prometheusClientVersion")
    implementation("io.prometheus:simpleclient_hotspot:$prometheusClientVersion")
    implementation("io.prometheus:simpleclient_vertx:$prometheusClientVersion")

    compile "org.json:json:20190722"

    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
    testImplementation("io.kotlintest:kotlintest-runner-junit5:$kotlinTestVersion")
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}


shadowJar {
    classifier = 'fat'
    manifest {
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  main = "com.pinterest.ktlint.Main"
  args "src/**/*.kt"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  main = "com.pinterest.ktlint.Main"
  args "-F", "src/**/*.kt"
}
